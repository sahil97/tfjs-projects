{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","video","React","createRef","canvas","detectFrame","model","detect","then","predictions","renderPredictions","requestAnimationFrame","ctx","current","getContext","clearRect","width","height","font","textBaseline","forEach","prediction","x","bbox","y","strokeStyle","lineWidth","strokeRect","fillStyle","textWidth","measureText","class","textHeight","parseInt","fillRect","fillText","navigator","mediaDevices","getUserMedia","webCamPromise","audio","facingMode","stream","window","srcObject","Promise","resolve","reject","onloadedmetadata","modelPromise","cocoSsd","all","values","catch","error","console","className","ref","this","autoPlay","playsInline","muted","href","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"uZA8GeA,G,uNAvGbC,MAAQC,IAAMC,Y,EACdC,OAASF,IAAMC,Y,EA+BfE,YAAc,SAACJ,EAAOK,GACpBA,EAAMC,OAAON,GAAOO,MAAK,SAAAC,GACvB,EAAKC,kBAAkBD,GACvBE,uBAAsB,WACpB,EAAKN,YAAYJ,EAAOK,U,EAK9BI,kBAAoB,SAAAD,GAClB,IAAMG,EAAM,EAAKR,OAAOS,QAAQC,WAAW,MAC3CF,EAAIG,UAAU,EAAG,EAAGH,EAAIR,OAAOY,MAAOJ,EAAIR,OAAOa,QAEjD,IAAMC,EAAO,kBACbN,EAAIM,KAAOA,EACXN,EAAIO,aAAe,MACnBV,EAAYW,SAAQ,SAAAC,GAClB,IAAMC,EAAID,EAAWE,KAAK,GACpBC,EAAIH,EAAWE,KAAK,GACpBP,EAAQK,EAAWE,KAAK,GACxBN,EAASI,EAAWE,KAAK,GAC/BX,EAAIa,YAAc,UAClBb,EAAIc,UAAY,EAChBd,EAAIe,WAAWL,EAAGE,EAAGR,EAAOC,GAC5BL,EAAIgB,UAAY,UAChB,IAAMC,EAAYjB,EAAIkB,YAAYT,EAAWU,OAAOf,MAC9CgB,EAAaC,SAASf,EAAM,IAClCN,EAAIsB,SAASZ,EAAGE,EAAGK,EAAY,EAAGG,EAAa,MAGjDvB,EAAYW,SAAQ,SAAAC,GAClB,IAAMC,EAAID,EAAWE,KAAK,GACpBC,EAAIH,EAAWE,KAAK,GAC1BX,EAAIgB,UAAY,UAChBhB,EAAIuB,SAASd,EAAWU,MAAOT,EAAGE,O,mFA/DjB,IAAD,OAClB,GAAIY,UAAUC,cAAgBD,UAAUC,aAAaC,aAAc,CACjE,IAAMC,EAAgBH,UAAUC,aAC7BC,aAAa,CACZE,OAAO,EACPvC,MAAO,CACLwC,WAAY,UAGfjC,MAAK,SAAAkC,GAGJ,OAFAC,OAAOD,OAASA,EAChB,EAAKzC,MAAMY,QAAQ+B,UAAYF,EACxB,IAAIG,SAAQ,SAACC,EAASC,GAC3B,EAAK9C,MAAMY,QAAQmC,iBAAmB,WACpCF,WAIFG,EAAeC,MACrBL,QAAQM,IAAI,CAACF,EAAcV,IACxB/B,MAAK,SAAA4C,GACJ,EAAK/C,YAAY,EAAKJ,MAAMY,QAASuC,EAAO,OAE7CC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,S,+BA4CpB,OACE,yBAAKE,UAAU,OACb,yBAAKA,UAAU,aACb,qEACA,oDACA,yBAAKzB,MAAM,mBACT,2BACE0B,IAAKC,KAAKzD,MACV0D,UAAQ,EACRC,aAAW,EACXC,OAAK,EACL5C,OAAO,MACPD,MAAM,QAER,4BACEC,OAAO,MACPD,MAAM,MACNyC,IAAKC,KAAKtD,WAId,4BAAQ2B,MAAM,UACd,sCACW,IACT,uBAAG+B,KAAK,8BAAR,wB,GAjGMC,cCOEC,QACW,cAA7BrB,OAAOsB,SAASC,UAEe,UAA7BvB,OAAOsB,SAASC,UAEhBvB,OAAOsB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBnC,WACrBA,UAAUoC,cAAcC,MACrBjE,MAAK,SAAAkE,GACJA,EAAaC,gBAEdtB,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMsB,c","file":"static/js/main.56e0b2be.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport * as cocoSsd from \"@tensorflow-models/coco-ssd\";\nimport \"@tensorflow/tfjs\";\nimport './App.css';\n\nclass App extends Component {\n\n  video = React.createRef();\n  canvas = React.createRef();\n\n  componentDidMount() {\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n      const webCamPromise = navigator.mediaDevices\n        .getUserMedia({\n          audio: false,\n          video: {\n            facingMode: \"user\"\n          }\n        })\n        .then(stream => {\n          window.stream = stream;\n          this.video.current.srcObject = stream;\n          return new Promise((resolve, reject) => {\n            this.video.current.onloadedmetadata = () => {\n              resolve();\n            };\n          });\n        });\n      const modelPromise = cocoSsd.load();\n      Promise.all([modelPromise, webCamPromise])\n        .then(values => {\n          this.detectFrame(this.video.current, values[0]);\n        })\n        .catch(error => {\n          console.error(error);\n        });\n    }\n  }\n\n  detectFrame = (video, model) => {\n    model.detect(video).then(predictions => {\n      this.renderPredictions(predictions);\n      requestAnimationFrame(() => {\n        this.detectFrame(video, model);\n      });\n    });\n  };\n\n  renderPredictions = predictions => {\n    const ctx = this.canvas.current.getContext(\"2d\");\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    // Font options.\n    const font = \"16px sans-serif\";\n    ctx.font = font;\n    ctx.textBaseline = \"top\";\n    predictions.forEach(prediction => {\n      const x = prediction.bbox[0];\n      const y = prediction.bbox[1];\n      const width = prediction.bbox[2];\n      const height = prediction.bbox[3];\n      ctx.strokeStyle = \"#00FFFF\";\n      ctx.lineWidth = 4;\n      ctx.strokeRect(x, y, width, height);\n      ctx.fillStyle = \"#00FFFF\";\n      const textWidth = ctx.measureText(prediction.class).width;\n      const textHeight = parseInt(font, 10); // base 10\n      ctx.fillRect(x, y, textWidth + 4, textHeight + 4);\n    });\n\n    predictions.forEach(prediction => {\n      const x = prediction.bbox[0];\n      const y = prediction.bbox[1];\n      ctx.fillStyle = \"#000000\";\n      ctx.fillText(prediction.class, x, y);\n    });\n  };\n\n  render(){\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <h1>Object Detection using Tensorflow-JS </h1> \n          <p> Model used - CocoSSD</p>\n          <div class=\"objectDeteciton\">\n            <video\n              ref={this.video}\n              autoPlay\n              playsInline\n              muted\n              height=\"500\"\n              width=\"600\"\n            />\n            <canvas\n              height=\"500\"\n              width=\"600\"\n              ref={this.canvas}\n            />\n            </div>\n          </div>\n          <footer class=\"footer\">\n          <p>\n            Built by{\" \"}\n            <a href=\"https://github.com/sahil97\">@Sahil Sharma</a>\n          </p>\n        </footer>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}